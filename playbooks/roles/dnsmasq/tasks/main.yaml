- name: install dnsmasq
  package:
    name: dnsmasq
    state: latest

- name: ensure dnsmasq.hosts
  file: path="{{ dnsmasq_hosts_path }}" state=touch

- name: get dnsmasq server
  get_app_proc_ip: container_app="tinydns" container_proc="worker"
  register: result
  ignore_errors: true

- set_fact: dnsmasq_server_ip="{{ result.ip }}"
  when: result|success

- set_fact: dnsmasq_server_port="{{ result.port }}"
  when: result|success

- name: stop dnsmasq before change service unit file(Ubuntu)
  service: name=dnsmasq enabled=yes state=stopped
  when: ansible_distribution == "Ubuntu" and
        (bootstrapping|bool or target|default('') == 'new_nodes')

- name: adjust dnsmasq service unit file(PIDFile)
  lineinfile:
    path: "{{ dnsmasq_service_path }}"
    regexp: "^PIDFile="
    line: "PIDFile=/var/run/dnsmasq.pid"
  notify:
    - reload systemd for dnsmasq
  when: ansible_distribution == "Ubuntu" and
        (bootstrapping|bool or target|default('') == 'new_nodes')
- meta: flush_handlers

- name: check if dnsmasq.servers exists
  stat: path="{{ dnsmasq_servers_path }}"
  register: dnsmasq_servers_result

- name: generate dnsmasq.servers if not exists
  template: src=dnsmasq.servers.conf.j2 dest="{{ dnsmasq_servers_path }}"
  when: result|success and not dnsmasq_servers_result.stat.exists
  notify:
    - restart dnsmasq

- name: ensure dnsmasq.servers
  file: path="{{ dnsmasq_servers_path }}" state=touch
  when: result|failed

- name: config dnsmasq
  template: src=dnsmasq.conf.j2 dest=/etc/dnsmasq.conf
  notify:
    - restart dnsmasq
- meta: flush_handlers

- name: enable and start dnsmasq service
  service: name=dnsmasq enabled=yes state=started

- name: set dnsmasq as default resolver
  lineinfile: dest=/etc/resolv.conf line="nameserver 127.0.0.1" insertbefore=BOF
